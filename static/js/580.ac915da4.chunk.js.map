{"version":3,"file":"static/js/580.ac915da4.chunk.js","mappings":"yIACA,SAAiB,E,aCAjB,QAAuB,mB,aCCvB,MAYI,EAZUA,IAENC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,gEACRN,EAAMO,SACPN,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,UACLJ,EAAMQ,YCRvB,EAA6B,4BAA7B,EAAiE,uBCmC7D,GA/BYC,EAAAA,EAAAA,OAAKT,IAEjB,IAAIU,EAAYV,EAAMW,MAAMC,KAAIC,IAAQR,EAAAA,EAAAA,KAACS,EAAI,CAACP,QAASM,EAAKA,KAAML,MAAOK,EAAKL,OAAYK,EAAKE,MAC3FC,EAAUC,EAAAA,YAWd,OACIhB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAcC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cAGJH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,YAAUa,SAZPC,KACf,IAAIC,EAAOJ,EAAQK,QAAQC,MAC3BtB,EAAMuB,kBAAkBH,EAAK,EAUiBI,IAAKR,EAASM,MAAOtB,EAAMyB,iBAEjEpB,EAAAA,EAAAA,KAAA,UAAQqB,QAlBJC,KACZ3B,EAAM4B,SAAS,EAiBoBxB,SAAC,iBAEhCC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAASC,SACpBM,EAAUmB,cAEb,I,aC7Bd,MAoBA,GAFyBC,EAAAA,EAAAA,KAlBAC,IACd,CACHpB,MAAOoB,EAAMC,YAAYrB,MACzBc,YAAaM,EAAMC,YAAYP,gBAGXQ,IACjB,CACHV,kBAAoBH,IAChB,IAAIc,GAASC,EAAAA,EAAAA,IAA+Bf,GAC5Ca,EAASC,EAAO,EAEpBN,QAASA,KACLK,GAASG,EAAAA,EAAAA,MAAuB,KAKnBN,CAA6CO,GCrBtE,EAAyC,4CAAzC,EAAyG,uCAAzG,EAA8J,iCAA9J,EAAwN,4CAAxN,EAAkR,iCAAlR,EAA4T,4B,aCA5T,SAAiB,ECoCjB,EAjC2BrC,IAEvB,MAAOsC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAQC,IAAaF,EAAAA,EAAAA,UAASxC,EAAMyC,SAC3CE,EAAAA,EAAAA,YAAU,KACND,EAAU1C,EAAMyC,OAAO,GACzB,CAACzC,EAAMyC,SAUT,OACIxC,EAAAA,EAAAA,MAAA,OAAKC,UAAW0C,EAAMC,YAAYzC,SAAA,EAC5BkC,IACEjC,EAAAA,EAAAA,KAAA,OAAKH,UAAW0C,EAAME,YAAY1C,UAC9BC,EAAAA,EAAAA,KAAA,QAAM0C,cAbGC,IAAMT,GAAY,GAaWnC,SAAEJ,EAAMyC,QAAU,gBAE/DH,IACDjC,EAAAA,EAAAA,KAAA,OAAKH,UAAW0C,EAAMK,aAAa7C,UAC/BC,EAAAA,EAAAA,KAAA,SACIiB,MAAOmB,EAAQS,OAjBJC,KACvBZ,GAAY,GACRvC,EAAMoD,aAAaX,EAAO,EAgBlBY,WAAW,EAAMnC,SAdToC,IACpBZ,EAAUY,EAAMC,cAAcjC,MAAM,QAgB9B,ECXV,EAlBiBtB,GACbA,EAAMwD,SAINvD,EAAAA,EAAAA,MAAA,WAASC,UAAWC,EAA0BC,SAAA,EAC1CH,EAAAA,EAAAA,MAAA,OAAKC,UAAYC,EAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAUC,UAClBC,EAAAA,EAAAA,KAACoD,EAAiB,CAAChB,OAAQzC,EAAMyC,OAAQW,aAAcpD,EAAMoD,kBAErE/C,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAgBG,IAAON,EAAMwD,QAAQE,OAAOC,OAAS,oEAEzEtD,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAA0BC,UACtCC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAeC,SAAC,uBAXjCC,EAAAA,EAAAA,KAACuD,EAAAA,EAAS,ICSrB,EAVa5D,IAEbC,EAAAA,EAAAA,MAAA,OAAKC,UAAYC,EAAG0D,KAAKzD,SAAA,EACrBC,EAAAA,EAAAA,KAACyD,EAAW,CACRN,QAASxD,EAAMwD,QAASf,OAAQzC,EAAMyC,OACtCW,aAAcpD,EAAMoD,gBACxB/C,EAAAA,EAAAA,KAAC0D,EAAgB,CAACC,MAAOhE,EAAMgE,W,+BCHvC,MAAMC,UAAyBhD,EAAAA,UAC3BiD,iBAAAA,GACI,IAAIC,EAAYC,KAAKpE,MAAMqE,OAAOC,OAAOH,UAChCA,IACDA,EAAYC,KAAKpE,MAAMuE,aAClBJ,GACDC,KAAKpE,MAAMwE,QAAQC,KAAK,WAGpCL,KAAKpE,MAAM0E,eAAeP,GAC1BC,KAAKpE,MAAM2E,UAAUR,EACrB,CACJS,MAAAA,GACI,OACIvE,EAAAA,EAAAA,KAACwE,EAAO,IACCT,KAAKpE,MAAQwD,QAASY,KAAKpE,MAAMwD,QACtCf,OAAQ2B,KAAKpE,MAAMyC,OAAQW,aAAcgB,KAAKpE,MAAMoD,cAC3D,EAET,MAqBA,GAAe0B,EAAAA,EAAAA,KACXhD,EAAAA,EAAAA,KARqBC,IAAK,CAC1ByB,QAASzB,EAAMC,YAAYwB,QAC3Bf,OAAQV,EAAMC,YAAYS,OAC1B8B,aAAcxC,EAAMgD,KAAKhE,GACzBiE,OAAQjD,EAAMgD,KAAKC,UAIM,CAACN,eAAc,KAAEC,UAAS,KAAEvB,aAAY,QAtBjD6B,GAChB,SAAiCjF,GAC7B,IAAIkF,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXf,GAASgB,EAAAA,EAAAA,MACb,OACIjF,EAAAA,EAAAA,KAAC4E,EAAS,IACDjF,EACLqE,OAAQ,CAAEa,WAAUE,WAAUd,WAG1C,GAaAiB,EAAAA,EAHJ,CAIEtB,E,yEChDF,IAAIuB,EAA2BzD,IAAK,CAChCiD,OAAQjD,EAAMgD,KAAKC,SAGhB,MAAMO,EAAoBN,IAC7B,MAAMQ,UAA0BxE,EAAAA,UAC5B2D,MAAAA,GACI,OAAIR,KAAKpE,MAAMgF,QACR3E,EAAAA,EAAAA,KAAC4E,EAAS,IAAKb,KAAKpE,SADGK,EAAAA,EAAAA,KAACqF,EAAAA,GAAQ,CAACC,GAAI,UAEhD,EAGJ,OAD0B7D,EAAAA,EAAAA,IAAQ0D,EAAR1D,CAAiC2D,EACjC,C","sources":["components/Profile/Profile.module.css","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusHook.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import cl from './Post.module.css'\n\nconst Post = (props) => {\n    return  (\n        <div className={cl.item}>\n            <img src='https://avatarzo.ru/wp-content/uploads/squid-game-anime.jpg'></img>\n            {props.message}\n            <div>\n                <span>like </span> \n                {props.likes}\n            </div>\n        </div>\n    )}\n\n    export default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","import React from 'react';\nimport { memo } from 'react';\nimport Post from './Post/Post';\nimport cl from './MyPosts.module.css';\n\nconst MyPosts = memo(props => {\n\n    let postsItem = props.posts.map(post => <Post message={post.post} likes={post.likes} key={post.id}/>);\n    let newPost = React.createRef();\n    \n    let onAddPost = () => {\n        props.addPost()\n    };\n    \n    let onChangeText = () => {\n        let text = newPost.current.value\n        props.updateNewPostText(text)\n    };\n\n    return  (\n        <div className={cl.postsBlock}>\n            <h3>\n                My posts\n            </h3>\n            <div>\n                <div>\n                    <textarea onChange={onChangeText} ref={newPost} value={props.newPostText}/>\n                </div>\n                <button onClick={onAddPost}>Add post</button>\n            </div>\n            <div className={cl.posts}>\n                {postsItem.reverse()}\n            </div>\n        </div>\n    )});\n\n    export default MyPosts;","import { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile_reducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateNewPostText: (text) => {\n            let action = updateNewPostTextActionCreator(text)\n            dispatch(action)\n        },\n        addPost: () => {\n            dispatch(addPostActionCreator())\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo__container\":\"ProfileInfo_profileInfo__container__ZmQPk\",\"avatar__container\":\"ProfileInfo_avatar__container__WC25Y\",\"avatar__img\":\"ProfileInfo_avatar__img__vn3Rf\",\"description__container\":\"ProfileInfo_description__container__Vkutc\",\"description\":\"ProfileInfo_description__u7GZ5\",\"status\":\"ProfileInfo_status__YrBI5\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React, {useState, useEffect} from 'react';\nimport style from './ProfileStatus.module.css'\n\n\nconst ProfileStatusHook = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n    const activateAditMode = () => setEditMode(true)\n    const deactivateAditMode = () => {\n        setEditMode(false)\n            props.updateStatus(status)\n        }\n    const onStatusChange = (event) => {\n        setStatus(event.currentTarget.value)\n    }\n    \n    return ( \n        <div className={style.status_wrap}>\n            {!editMode &&\n                <div className={style.status_text}>\n                    <span onDoubleClick={activateAditMode}>{props.status || 'No status'}</span>\n                </div>}\n            {editMode &&\n            <div className={style.status_input}>\n                <input \n                    value={status} onBlur={deactivateAditMode} \n                    autoFocus={true} onChange={onStatusChange}\n                    /> \n            </div>}\n        </div>\n        )\n    };\n\nexport default ProfileStatusHook;","import cl from './ProfileInfo.module.css';\nimport Preloader from '../../common/Preloader/Preloader';\nimport ProfileStatusHook from './ProfileStatus/ProfileStatusHook';\n\nconst ProfileInfo = (props) => {\n    if(!props.profile) {\n        return <Preloader />\n    }\n    return  (\n        <section className={cl.profileInfo__container}>\n            <div className ={cl.avatar__container}>\n                <div className={cl.status}>\n                        <ProfileStatusHook status={props.status} updateStatus={props.updateStatus} />\n                </div>\n                <img className={cl.avatar__img} src = {props.profile.photos.small || 'https://avatarzo.ru/wp-content/uploads/squid-game-anime.jpg'} />\n            </div>\n            <div className={cl.description__container}>\n                <div className={cl.description}>Description.</div>\n            </div>\n        </section>\n    )};\n\n    export default ProfileInfo;","import cl from './Profile.module.css';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\n\nconst Profile = (props) => {\n    return  (\n    <div className ={cl.main}>\n        <ProfileInfo \n            profile={props.profile} status={props.status}\n            updateStatus={props.updateStatus} />\n        <MyPostsContainer store={props.store}/>\n    </div>\n    )}\n\n    export default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile_reducer';\nimport { connect } from 'react-redux';\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nclass ProfileContainer extends React.Component {\n    componentDidMount() {\n        let profileId = this.props.router.params.profileId\n            if (!profileId) {\n                profileId = this.props.authorizedId\n                if (!profileId) {\n                    this.props.history.push('/login')\n                }\n            }\n        this.props.getUserProfile(profileId)\n        this.props.getStatus(profileId)\n        }\n    render() {\n        return  (\n            <Profile \n                { ...this.props } profile={this.props.profile}\n                status={this.props.status} updateStatus={this.props.updateStatus}/>\n        )}\n};\nconst withRouter = (Component) => {\n    function ComponentWithRouterProp(props) {\n        let location = useLocation();\n        let navigate = useNavigate();\n        let params = useParams();\n        return (\n            <Component\n                { ...props }\n                router={{ location, navigate, params }}\n            />\n        );\n    }\n    return ComponentWithRouterProp;\n};\nconst mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedId: state.auth.id,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter,\n    withAuthRedirect, \n)(ProfileContainer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nlet mapStateToPropsRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if(!this.props.isAuth) return <Navigate to={'/login'} />\n            return <Component {...this.props} />\n        }\n    }\n    let ConnectAuthRedirect = connect(mapStateToPropsRedirect)(RedirectComponent)\n    return ConnectAuthRedirect\n};\n"],"names":["props","_jsxs","className","cl","children","_jsx","src","message","likes","memo","postsItem","posts","map","post","Post","id","newPost","React","onChange","onChangeText","text","current","value","updateNewPostText","ref","newPostText","onClick","onAddPost","addPost","reverse","connect","state","profilePage","dispatch","action","updateNewPostTextActionCreator","addPostActionCreator","MyPosts","editMode","setEditMode","useState","status","setStatus","useEffect","style","status_wrap","status_text","onDoubleClick","activateAditMode","status_input","onBlur","deactivateAditMode","updateStatus","autoFocus","event","currentTarget","profile","ProfileStatusHook","photos","small","Preloader","main","ProfileInfo","MyPostsContainer","store","ProfileContainer","componentDidMount","profileId","this","router","params","authorizedId","history","push","getUserProfile","getStatus","render","Profile","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsRedirect","RedirectComponent","Navigate","to"],"sourceRoot":""}